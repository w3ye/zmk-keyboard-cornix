/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "zmk-helpers/helper.h"
#include "includes/cornix54.h"

// tap windows for ctl alt and gui

#define HM_TAPPING_TERM 250
#define HM_TAPPING_REPEAT 210

// quick tapping for shift

#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 70
#define BASE 0
#define WIN 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4
#define NAVI   5
#define NUM    6
#define DEBUG  7

// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH1 LH0 RH0 RH1
#define KEYS_T LH1 LH0 RH0 RH1
#define ZMK_POINTING_DEFAULT_SCRL_VAL 15

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    // Activate ADJUST layer by pressing raise and lower

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <230>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <KEYS_R KEYS_T 16 15 14 13>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <230>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <KEYS_L KEYS_T 19 20 21 22>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        system {
            if-layers = <4 3>;
            then-layer = <5>;
        };
    };

    combos {
        compatible = "zmk,combos";

        tog_mix {
            bindings = <&tog 4>;
            key-positions = <6 7>;
            layers = <1 0 4>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
            layers = <1>;
        };

        tog_symb {
            bindings = <&tog 3>;
            key-positions = <6 8>;
            layers = <1 0 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            display-name = "Base";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp TAB    &kp Q     &kp W     &kp E         &kp R      &kp T                            &kp Y      &kp U     &kp I      &kp O          &kp P          &lt 5 DEL
&kp LCTRL  &kp A     &kp S     &kp D         &kp F      &kp G                            &kp H      &kp J     &kp K      &kp L          &kp SEMI       &kp SQT
&kp LSHFT  &lt 2 Z   &kp X     &kp C         &kp V      &kp B        &kp C_MUTE  &tog 1  &kp N      &kp M     &kp COMMA  &kp DOT        &lt 2 SLASH    &kp RSHFT
&none      &kp LGUI  &kp LALT  &lt 4 ESCAPE  &kp SPACE  &kp LC(TAB)                      &kp ENTER  &kp BSPC  &mo 3      &kp RIGHT_ALT  &kp RIGHT_GUI  &none
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp C_NEXT C_PREV>;
        };

        Homerow {
            display-name = "homerow";
            bindings = <
&kp TAB    &kp Q            &kp W            &kp E                &kp R              &kp T                      &kp Y        &kp U               &kp I                 &kp O             &kp P                &lt 5 DELETE
&kp LCTRL  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G                      &kp H        &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hml RIGHT_ALT L  &hml RIGHT_GUI SEMI  &kp SQT
&kp LSHFT  &lt 2 Z          &kp X            &kp C                &kp V              &kp B  &kp C_MUTE  &tog 0  &kp N        &kp M               &kp COMMA             &kp DOT           &lt 2 SLASH          &kp RSHFT
&none      &kp LGUI         &kp LALT         &lt 4 ESCAPE         &kp SPACE          &mo 6                      &lt 6 ENTER  &kp BSPC            &mo 3                 &kp RIGHT_ALT     &kp RIGHT_GUI        &none
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp C_NEXT C_PREVIOUS>;
        };

        Nav {
            display-name = "nav";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&trans  &trans  &kp HOME  &kp UP    &kp END    &kp PAGE_UP                    &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PAGE_DOWN                  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans    &trans    &trans     &kp INSERT     &trans  &trans  &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &trans    &trans    &trans     &trans                         &trans    &trans    &trans  &trans     &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        Symbol_layer {
            display-name = "Symbols";

            // TODO: Some binds are waiting for shifted keycode support.
            // -------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp GRAVE       &kp EXCL       &kp AT        &kp HASH      &kp DLLR      &kp PRCNT                     &trans  &kp MINUS      &kp LS(PLUS)  &trans      &kp BACKSLASH  &kp PIPE
&kp LS(TILDE)   &kp LS(CARET)  &kp LS(AMPS)  &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(STAR)                  &trans  &kp LS(TILDE)  &kp EQUAL     &trans      &kp LS(COLON)  &kp LS(DQT)
&kp LEFT_SHIFT  &kp LS(LBRC)   &kp LS(RBRC)  &kp LBKT      &kp RBKT      &kp BSLH      &trans  &trans  &trans  &trans         &kp LS(LT)    &kp LS(GT)  &kp LS(QMARK)  &none
&none           &none          &none         &trans        &trans        &trans                        &trans  &kp BACKSPACE  &trans        &none       &none          &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        Num {
            display-name = "num";

            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |       | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |       | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |       | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //                |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&kp MINUS       &kp N1    &kp N2        &kp N3     &kp N4        &kp N5                    &kp F1         &kp F2         &kp F3  &kp F4   &kp F5   &kp F6
&kp LS(PLUS)    &kp N6    &kp N7        &kp N8     &kp N9        &kp N0                    &kp F7         &kp F8         &kp F9  &kp F10  &kp F11  &kp F12
&kp LEFT_SHIFT  &kp FSLH  &kp LS(STAR)  &kp EQUAL  &kp LS(PLUS)  &kp MINUS  &none  &tog 4  &kp LS(PRCNT)  &none          &none   &none    &none    &trans
&none           &none     &none         &trans     &trans        &trans                    &trans         &kp BACKSPACE  &trans  &none    &none    &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        System {
            display-name = "system";

            // ----------------------------------------------------------------------------------------------------------------------------
            // | BTCLR  |  BT1    |  BT2    |   BT3   |   BT4   |   BT5   |                  |      |      |       |      |       |       |
            // | moDEBUG| RGB_HUD | RGB_HUI | RGB_SAD | RGB_SAI | RGB_EFF |                  |      |      |       |      |       |       |
            // | EXTPWR | RGB_BRD | RGB_BRI |         |         |         |                  |      |      |       |      |       |       |
            // |        |         |         |         |         |         | RGB_TOG | |      |      |      |       |      |       |       |
            //                    |         |         |         |         |         | |      |      |      |       |      |

            bindings = <
&bt BT_CLR      &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4                   &none      &none  &none  &none  &none  &none
&bt BT_CLR_ALL  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4                  &none      &none  &none  &none  &none  &none
&none           &none          &none          &none          &none          &none          &trans  &trans  &none      &none  &none  &none  &none  &none
&none           &none          &none          &none          &none          &none                          &soft_off  &none  &none  &none  &none  &none
            >;
        };

        Macshortcut {
            bindings = <
&trans  &kt LG(Q)  &mt LG(LS(NUMBER_2)) LG(W)  &trans               &mt LG(LS(NUMBER_4)) LG(LS(LC(NUMBER_4)))  &kp LG(LS(N5))                         &trans                   &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(A)  &trans                      &trans               &trans                                     &trans                                 &trans                   &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(Z)  &trans                      &mt LG(LS(C)) LG(C)  &trans                                     &trans                 &trans  &trans  &mt LA(LS(N)) LA(LC(N))  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans                      &trans               &kp LG(SPACE)                              &kp LG(LS(LC(SPACE)))                  &trans                   &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
